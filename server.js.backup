// server.js - CORRECT ORDER IS CRITICAL

const express = require('express');
const expressLayouts = require('express-ejs-layouts'); // Import first
const path = require('path');
const mongoose = require('mongoose');
const session = require('express-session');
const MongoStore = require('connect-mongo');
const socketIo = require('socket.io');
const http = require('http');

require('dotenv').config();

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

// 1. FIRST: Basic Express setup
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// 2. SECOND: Configure express-ejs-layouts BEFORE any routes
app.use(expressLayouts);
app.set('layout', 'layouts/main');
app.set('layout extractScripts', true);
app.set('layout extractStyles', true);

// 3. THIRD: Other middleware
app.use(express.static(path.join(__dirname, 'public')));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// 4. Session setup
app.use(session({
    secret: process.env.SESSION_SECRET || 'rocket-betting-secret-key',
    resave: false,
    saveUninitialized: false,
    store: MongoStore.create({
        mongoUrl: process.env.MONGODB_URI || 'mongodb://localhost/rocket-betting'
    }),
    cookie: {
        secure: false, // Set to true if using HTTPS
        maxAge: 24 * 60 * 60 * 1000 // 24 hours
    }
}));

// 5. Make io available to routes
app.use((req, res, next) => {
    req.io = io;
    next();
});

// 6. MongoDB connection
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost/rocket-betting', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
.then(() => console.log('✅ MongoDB connected'))
.catch(err => console.error('❌ MongoDB connection error:', err));

// 7. Routes - MUST come AFTER layout setup
const authRoutes = require('./routes/auth');
const gameRoutes = require('./routes/game');
const adminRoutes = require('./routes/admin');

app.use('/auth', authRoutes);
app.use('/game', gameRoutes);
app.use('/admin', adminRoutes);

// 8. Root route
app.get('/', (req, res) => {
    if (req.session.user) {
        res.redirect('/game/landing');
    } else {
        res.redirect('/auth/login');
    }
});

// 9. Socket.io setup
io.on('connection', (socket) => {
    console.log('User connected:', socket.id);
    
    socket.on('join-game', (userId) => {
        socket.join(`user-${userId}`);
        console.log(`User ${userId} joined game room`);
    });
    
    socket.on('disconnect', () => {
        console.log('User disconnected:', socket.id);
    });
});

// 10. Error handling middleware
app.use((err, req, res, next) => {
    console.error('Error:', err);
    res.status(500).render('error', { 
        title: 'Error',
        error: process.env.NODE_ENV === 'development' ? err : { message: 'Something went wrong!' },
        layout: 'layouts/main' // Explicitly set layout for error pages
    });
});

// 11. 404 handler
app.use('*', (req, res) => {
    res.status(404).render('404', { 
        title: '404 - Page Not Found',
        url: req.originalUrl,
        layout: 'layouts/main' // Explicitly set layout for 404 pages
    });
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
    console.log(`🚀 Server running on port ${PORT}`);
});

module.exports = app;