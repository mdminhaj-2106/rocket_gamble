<% layout('layouts/main') -%>

<div class="container-fluid py-4">
    <!-- Admin Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card admin-card">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col-md-6">
                            <h1 class="text-light mb-0">
                                <i class="fas fa-tachometer-alt me-3"></i>
                                Admin Control Panel
                            </h1>
                            <p class="text-muted mb-0">Game Management Dashboard</p>
                        </div>
                        <div class="col-md-6 text-end">
                            <div class="admin-actions">
                                <button class="btn btn-outline-warning me-2" onclick="refreshDashboard()">
                                    <i class="fas fa-sync-alt me-1"></i> Refresh
                                </button>
                                <a href="/admin/logout" class="btn admin-btn">
                                    <i class="fas fa-sign-out-alt me-1"></i> Logout
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Stats Overview -->
    <div class="row mb-4">
        <div class="col-xl-3 col-md-6 mb-3">
            <div class="card admin-card">
                <div class="card-body">
                    <div class="stat-item">
                        <div class="stat-icon bg-primary">
                            <i class="fas fa-users fa-2x"></i>
                        </div>
                        <div class="stat-content">
                            <h3 class="stat-number" id="totalUsers"><%= totalUsers %></h3>
                            <p class="stat-label">Total Users</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-md-6 mb-3">
            <div class="card admin-card">
                <div class="card-body">
                    <div class="stat-item">
                        <div class="stat-icon bg-success">
                            <i class="fas fa-coins fa-2x"></i>
                        </div>
                        <div class="stat-content">
                            <h3 class="stat-number" id="totalBets"><%= totalBets %></h3>
                            <p class="stat-label">Total Bets</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-md-6 mb-3">
            <div class="card admin-card">
                <div class="card-body">
                    <div class="stat-item">
                        <div class="stat-icon bg-warning">
                            <i class="fas fa-rocket fa-2x"></i>
                        </div>
                        <div class="stat-content">
                            <h3 class="stat-number" id="activeRounds">3</h3>
                            <p class="stat-label">Game Rounds</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-md-6 mb-3">
            <div class="card admin-card">
                <div class="card-body">
                    <div class="stat-item">
                        <div class="stat-icon bg-danger">
                            <i class="fas fa-chart-line fa-2x"></i>
                        </div>
                        <div class="stat-content">
                            <h3 class="stat-number" id="serverStatus">Online</h3>
                            <p class="stat-label">Server Status</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Round Management -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card admin-card">
                <div class="card-header bg-transparent border-0">
                    <h4 class="text-light mb-0">
                        <i class="fas fa-gamepad me-2"></i>Round Management
                    </h4>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4 mb-3">
                            <div class="round-control-card">
                                <div class="round-header">
                                    <i class="fas fa-rocket fa-2x text-primary mb-2"></i>
                                    <h5 class="text-light">Round 1: Rocket Distance</h5>
                                </div>
                                <div class="round-stats mb-3">
                                    <div class="stat-row">
                                        <span>Players:</span>
                                        <span class="text-info" id="round1Players">
                                            <%= usersByRound.find(r => r._id === 1)?.count || 0 %>
                                        </span>
                                    </div>
                                    <div class="stat-row">
                                        <span>Pending Bets:</span>
                                        <span class="text-warning" id="round1Bets">-</span>
                                    </div>
                                </div>
                                <div class="round-controls">
                                    <div class="mb-2">
                                        <label class="form-label text-light">Winning Rocket (1-5):</label>
                                        <input type="number" class="form-control" id="round1Result" 
                                               min="1" max="5" placeholder="Enter winning rocket">
                                    </div>
                                    <button class="btn admin-btn w-100" onclick="setRoundResult(1)">
                                        <i class="fas fa-flag-checkered me-1"></i>Set Result
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-4 mb-3">
                            <div class="round-control-card">
                                <div class="round-header">
                                    <i class="fas fa-bullseye fa-2x text-warning mb-2"></i>
                                    <h5 class="text-light">Round 2: Range Prediction</h5>
                                </div>
                                <div class="round-stats mb-3">
                                    <div class="stat-row">
                                        <span>Players:</span>
                                        <span class="text-info" id="round2Players">
                                            <%= usersByRound.find(r => r._id === 2)?.count || 0 %>
                                        </span>
                                    </div>
                                    <div class="stat-row">
                                        <span>Pending Bets:</span>
                                        <span class="text-warning" id="round2Bets">-</span>
                                    </div>
                                </div>
                                <div class="round-controls">
                                    <div class="mb-2">
                                        <label class="form-label text-light">Actual Range (0-1000m):</label>
                                        <input type="number" class="form-control" id="round2Result" 
                                               min="0" max="1000" placeholder="Enter actual range">
                                    </div>
                                    <button class="btn admin-btn w-100" onclick="setRoundResult(2)">
                                        <i class="fas fa-flag-checkered me-1"></i>Set Result
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-4 mb-3">
                            <div class="round-control-card">
                                <div class="round-header">
                                    <i class="fas fa-fist-raised fa-2x text-danger mb-2"></i>
                                    <h5 class="text-light">Round 3: Dog Fights</h5>
                                </div>
                                <div class="round-stats mb-3">
                                    <div class="stat-row">
                                        <span>Players:</span>
                                        <span class="text-info" id="round3Players">
                                            <%= usersByRound.find(r => r._id === 3)?.count || 0 %>
                                        </span>
                                    </div>
                                    <div class="stat-row">
                                        <span>Current Fight:</span>
                                        <span class="text-warning" id="currentFight">1/20</span>
                                    </div>
                                </div>
                                <div class="round-controls">
                                    <div class="mb-2">
                                        <label class="form-label text-light">Fight Winner:</label>
                                        <select class="form-control" id="round3Result">
                                            <option value="">Select Winner</option>
                                            <option value="A">Fighter A</option>
                                            <option value="B">Fighter B</option>
                                        </select>
                                    </div>
                                    <button class="btn admin-btn w-100" onclick="setFightResult()">
                                        <i class="fas fa-trophy me-1"></i>Set Winner
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- User Management & Recent Activity -->
    <div class="row">
        <div class="col-lg-8">
            <div class="card admin-card">
                <div class="card-header bg-transparent border-0">
                    <div class="row align-items-center">
                        <div class="col-md-6">
                            <h4 class="text-light mb-0">
                                <i class="fas fa-users-cog me-2"></i>User Management
                            </h4>
                        </div>
                        <div class="col-md-6 text-end">
                            <button class="btn btn-outline-info btn-sm" onclick="loadUsers()">
                                <i class="fas fa-refresh me-1"></i>Refresh
                            </button>
                            <button class="btn btn-outline-danger btn-sm" onclick="showResetModal()">
                                <i class="fas fa-redo me-1"></i>Reset Game
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-dark table-hover">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Credits</th>
                                    <th>Round</th>
                                    <th>IP Address</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="usersTableBody">
                                <% recentUsers.forEach(user => { %>
                                    <tr data-user-id="<%= user._id %>">
                                        <td>
                                            <%= user.name %>
                                            <% if (!user.isActive) { %>
                                                <span class="badge bg-danger ms-1">Inactive</span>
                                            <% } %>
                                        </td>
                                        <td class="user-credits"><%= user.credits %></td>
                                        <td>Round <%= user.currentRound %></td>
                                        <td><small><%= user.ipAddress || 'N/A' %></small></td>
                                        <td>
                                            <button class="btn btn-sm btn-outline-warning" 
                                                    onclick="editUserCredits('<%= user._id %>', '<%= user.name %>', <%= user.credits %>)">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" 
                                                    onclick="toggleUserStatus('<%= user._id %>', <%= user.isActive %>)">
                                                <i class="fas fa-<%= user.isActive ? 'ban' : 'check' %>"></i>
                                            </button>
                                        </td>
                                    </tr>
                                <% }); %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-lg-4">
            <div class="card admin-card">
                <div class="card-header bg-transparent border-0">
                    <h4 class="text-light mb-0">
                        <i class="fas fa-activity me-2"></i>Live Activity
                    </h4>
                </div>
                <div class="card-body">
                    <div class="activity-feed" id="activityFeed">
                        <% recentBets.slice(0, 10).forEach(bet => { %>
                            <div class="activity-item">
                                <div class="activity-icon bg-info">
                                    <i class="fas fa-coins"></i>
                                </div>
                                <div class="activity-content">
                                    <p class="activity-text">
                                        <strong><%= bet.userId.name %></strong> bet 
                                        <span class="text-warning"><%= bet.amount %> credits</span>
                                        on Round <%= bet.round %>
                                    </p>
                                    <small class="activity-time text-muted">
                                        <%= new Date(bet.createdAt).toLocaleTimeString() %>
                                    </small>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                </div>
            </div>
            
            <!-- Top Players -->
            <div class="card admin-card mt-4">
                <div class="card-header bg-transparent border-0">
                    <h4 class="text-light mb-0">
                        <i class="fas fa-trophy me-2"></i>Top Players
                    </h4>
                </div>
                <div class="card-body">
                    <div class="top-players-list">
                        <% topPlayers.forEach((player, index) => { %>
                            <div class="player-item">
                                <div class="player-rank">
                                    <span class="rank-number">#<%= index + 1 %></span>
                                </div>
                                <div class="player-info">
                                    <p class="player-name"><%= player.name %></p>
                                    <small class="player-credits">
                                        <i class="fas fa-coins text-warning"></i>
                                        <%= player.credits.toLocaleString() %>
                                    </small>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Edit Credits Modal -->
<div class="modal fade" id="editCreditsModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content bg-dark">
            <div class="modal-header border-secondary">
                <h5 class="modal-title text-light">Edit User Credits</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label text-light">User:</label>
                    <p class="text-info" id="editUserName">-</p>
                </div>
                <div class="mb-3">
                    <label class="form-label text-light">Current Credits:</label>
                    <p class="text-warning" id="editCurrentCredits">-</p>
                </div>
                <div class="mb-3">
                    <label class="form-label text-light">New Credits:</label>
                    <input type="number" class="form-control" id="editNewCredits" min="0" max="100000">
                </div>
            </div>
            <div class="modal-footer border-secondary">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn admin-btn" onclick="saveCreditsEdit()">
                    <i class="fas fa-save me-1"></i>Update Credits
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Game Reset Modal -->
<div class="modal fade" id="resetGameModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content bg-dark border-danger">
            <div class="modal-header border-danger">
                <h5 class="modal-title text-danger">
                    <i class="fas fa-exclamation-triangle me-2"></i>Reset Game
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-danger">
                    <h6 class="alert-heading">⚠️ DANGER ZONE ⚠️</h6>
                    <p>This will permanently reset ALL game data:</p>
                    <ul class="mb-0">
                        <li>All user credits will be reset to 1000</li>
                        <li>All bet history will be cleared</li>
                        <li>All users will return to Round 1</li>
                        <li>Leaderboard will be reset</li>
                    </ul>
                </div>
                <div class="mb-3">
                    <label class="form-label text-light">Type "RESET_EVERYTHING" to confirm:</label>
                    <input type="text" class="form-control" id="resetConfirmation" 
                           placeholder="Type confirmation text">
                </div>
            </div>
            <div class="modal-footer border-danger">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="confirmGameReset()">
                    <i class="fas fa-nuclear me-1"></i>RESET GAME
                </button>
            </div>
        </div>
    </div>
</div>

<style>
.admin-card {
    background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
    border: 1px solid rgba(255, 255, 255, 0.1);
    color: white;
}

.stat-item {
    display: flex;
    align-items: center;
    gap: 20px;
}

.stat-icon {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
}

.stat-content h3 {
    margin: 0;
    font-size: 2rem;
    font-weight: bold;
    color: white;
}

.stat-label {
    margin: 0;
    color: rgba(255, 255, 255, 0.7);
    font-size: 0.9rem;
}

.round-control-card {
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 10px;
    padding: 20px;
    height: 100%;
}

.round-header {
    text-align: center;
    margin-bottom: 20px;
}

.stat-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: 8px;
    color: rgba(255, 255, 255, 0.8);
}

.activity-feed {
    max-height: 400px;
    overflow-y: auto;
}

.activity-item {
    display: flex;
    align-items: flex-start;
    gap: 15px;
    padding: 15px 0;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.activity-item:last-child {
    border-bottom: none;
}

.activity-icon {
    width: 35px;
    height: 35px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
}

.activity-content {
    flex: 1;
}

.activity-text {
    margin: 0 0 5px 0;
    font-size: 0.9rem;
    color: white;
}

.activity-time {
    font-size: 0.8rem;
}

.player-item {
    display: flex;
    align-items: center;
    gap: 15px;
    padding: 10px 0;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.player-item:last-child {
    border-bottom: none;
}

.player-rank {
    width: 30px;
    text-align: center;
}

.rank-number {
    font-weight: bold;
    color: #ffc107;
}

.player-info {
    flex: 1;
}

.player-name {
    margin: 0;
    color: white;
    font-weight: 500;
}

.player-credits {
    color: rgba(255, 255, 255, 0.7);
}

.table-dark {
    background: rgba(0, 0, 0, 0.3);
}

.table-dark th {
    border-color: rgba(255, 255, 255, 0.2);
    color: #ffc107;
}

.table-dark td {
    border-color: rgba(255, 255, 255, 0.1);
}

/* Custom scrollbar */
.activity-feed::-webkit-scrollbar {
    width: 6px;
}

.activity-feed::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 3px;
}

.activity-feed::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.3);
    border-radius: 3px;
}
</style>

<script>
let socket;
let editingUserId = null;
let currentFightSubRound = 1;

document.addEventListener('DOMContentLoaded', function() {
    // Initialize socket connection
    socket = io();
    
    // Listen for real-time updates
    socket.on('bet-placed', updateActivity);
    socket.on('user-joined', updateStats);
    socket.on('round-completed', handleRoundCompletion);
    
    // Load initial data
    updateLiveStats();
    
    // Auto-refresh every 30 seconds
    setInterval(updateLiveStats, 30000);
});

async function updateLiveStats() {
    try {
        const response = await fetch('/admin/api/stats');
        const data = await response.json();
        
        if (data.success) {
            document.getElementById('totalUsers').textContent = data.stats.activeUsers;
            document.getElementById('totalBets').textContent = data.stats.totalBets;
            document.getElementById('round1Bets').textContent = data.stats.round1Bets;
            document.getElementById('round2Bets').textContent = data.stats.round2Bets;
            
            // Update current fight display
            const currentFight = Math.min(currentFightSubRound, 20);
            document.getElementById('currentFight').textContent = `${currentFight}/20`;
        }
    } catch (error) {
        console.error('Error updating stats:', error);
    }
}

async function setRoundResult(round) {
    try {
        let result;
        let endpoint;
        
        if (round === 1) {
            result = parseInt(document.getElementById('round1Result').value);
            if (!result || result < 1 || result > 5) {
                alert('Please enter a valid rocket number (1-5)');
                return;
            }
            endpoint = '/admin/results/round1';
        } else if (round === 2) {
            result = parseInt(document.getElementById('round2Result').value);
            if (isNaN(result) || result < 0 || result > 1000) {
                alert('Please enter a valid range (0-1000 meters)');
                return;
            }
            endpoint = '/admin/results/round2';
        }
        
        if (!confirm(`Set Round ${round} result to: ${result}?`)) {
            return;
        }
        
        const response = await fetch(endpoint, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(round === 1 ? { winningRocket: result } : { actualRange: result })
        });
        
        const data = await response.json();
        
        if (data.success) {
            alert(data.message);
            updateLiveStats();
            addActivityItem(`Round ${round} result set: ${result}`, 'success');
        } else {
            alert('Error: ' + data.error);
        }
        
    } catch (error) {
        console.error('Error setting result:', error);
        alert('Network error. Please try again.');
    }
}

async function setFightResult() {
    try {
        const winner = document.getElementById('round3Result').value;
        if (!winner) {
            alert('Please select a fighter winner');
            return;
        }
        
        if (!confirm(`Set Fight ${currentFightSubRound} winner to Fighter ${winner}?`)) {
            return;
        }
        
        // For simplicity, we're setting one fight at a time
        const response = await fetch('/admin/results/round3', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
                fightResults: [winner], // In real implementation, collect all 20 results
                subRound: currentFightSubRound 
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            alert(`Fight ${currentFightSubRound} result set!`);
            currentFightSubRound = Math.min(currentFightSubRound + 1, 20);
            document.getElementById('currentFight').textContent = `${currentFightSubRound}/20`;
            document.getElementById('round3Result').value = '';
            addActivityItem(`Fight ${currentFightSubRound - 1} winner: Fighter ${winner}`, 'success');
        } else {
            alert('Error: ' + data.error);
        }
        
    } catch (error) {
        console.error('Error setting fight result:', error);
        alert('Network error. Please try again.');
    }
}

function editUserCredits(userId, userName, currentCredits) {
    editingUserId = userId;
    document.getElementById('editUserName').textContent = userName;
    document.getElementById('editCurrentCredits').textContent = currentCredits.toLocaleString();
    document.getElementById('editNewCredits').value = currentCredits;
    
    const modal = new bootstrap.Modal(document.getElementById('editCreditsModal'));
    modal.show();
}

async function saveCreditsEdit() {
    try {
        const newCredits = parseInt(document.getElementById('editNewCredits').value);
        
        if (isNaN(newCredits) || newCredits < 0) {
            alert('Please enter a valid credits amount');
            return;
        }
        
        const response = await fetch('/admin/users/edit-credits', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId: editingUserId, newCredits })
        });
        
        const data = await response.json();
        
        if (data.success) {
            // Update the table row
            const userRow = document.querySelector(`tr[data-user-id="${editingUserId}"]`);
            if (userRow) {
                userRow.querySelector('.user-credits').textContent = newCredits;
            }
            
            bootstrap.Modal.getInstance(document.getElementById('editCreditsModal')).hide();
            addActivityItem(`Credits updated for ${data.user.name}: ${newCredits}`, 'warning');
            alert('Credits updated successfully!');
        } else {
            alert('Error: ' + data.error);
        }
        
    } catch (error) {
        console.error('Error updating credits:', error);
        alert('Network error. Please try again.');
    }
}

async function toggleUserStatus(userId, currentStatus) {
    try {
        const action = currentStatus ? 'deactivate' : 'activate';
        
        if (!confirm(`Are you sure you want to ${action} this user?`)) {
            return;
        }
        
        const response = await fetch(`/admin/api/users/${userId}/toggle-status`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' }
        });
        
        const data = await response.json();
        
        if (data.success) {
            location.reload(); // Simple refresh for now
        } else {
            alert('Error: ' + data.message);
        }
        
    } catch (error) {
        console.error('Error toggling user status:', error);
        alert('Network error. Please try again.');
    }
}

function showResetModal() {
    const modal = new bootstrap.Modal(document.getElementById('resetGameModal'));
    modal.show();
}

async function confirmGameReset() {
    try {
        const confirmation = document.getElementById('resetConfirmation').value;
        
        if (confirmation !== 'RESET_EVERYTHING') {
            alert('Please type "RESET_EVERYTHING" to confirm the reset');
            return;
        }
        
        const response = await fetch('/admin/reset-game', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ confirmReset: confirmation })
        });
        
        const data = await response.json();
        
        if (data.success) {
            alert('Game reset successfully!');
            bootstrap.Modal.getInstance(document.getElementById('resetGameModal')).hide();
            location.reload();
        } else {
            alert('Error: ' + data.error);
        }
        
    } catch (error) {
        console.error('Error resetting game:', error);
        alert('Network error. Please try again.');
    }
}

function addActivityItem(message, type = 'info') {
    const activityFeed = document.getElementById('activityFeed');
    const iconClass = type === 'success' ? 'fa-check' : type === 'warning' ? 'fa-exclamation' : 'fa-info';
    const bgClass = type === 'success' ? 'bg-success' : type === 'warning' ? 'bg-warning' : 'bg-info';
    
    const activityItem = document.createElement('div');
    activityItem.className = 'activity-item';
    activityItem.innerHTML = `
        <div class="activity-icon ${bgClass}">
            <i class="fas ${iconClass}"></i>
        </div>
        <div class="activity-content">
            <p class="activity-text">${message}</p>
            <small class="activity-time text-muted">${new Date().toLocaleTimeString()}</small>
        </div>
    `;
    
    activityFeed.insertBefore(activityItem, activityFeed.firstChild);
    
    // Remove old items if more than 20
    while (activityFeed.children.length > 20) {
        activityFeed.removeChild(activityFeed.lastChild);
    }
}

function refreshDashboard() {
    location.reload();
}

function updateActivity(data) {
    addActivityItem(`${data.userName} placed a bet of ${data.amount} credits on Round ${data.round}`, 'info');
    updateLiveStats();
}

function updateStats() {
    updateLiveStats();
}

function handleRoundCompletion(data) {
    addActivityItem(`Round ${data.round} completed! Winners: ${data.winners}, Losers: ${data.losers}`, 'success');
}
</script>
