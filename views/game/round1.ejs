<% layout('layouts/main') -%>

<div class="container py-5">
  <!-- Round Header -->
  <div class="row">
    <div class="col-12 text-center mb-5">
      <div class="card card-glass fade-in">
        <div class="card-body p-4">
          <h1 class="font-orbitron text-gradient mb-3">
            <i class="fas fa-rocket fa-2x me-3"></i>
            Round 1: Rocket Distance Gamble
          </h1>
          <p class="lead text-light mb-4">Choose the rocket that will fly the farthest!</p>
          
          <!-- User Info Bar -->
          <div class="user-info-bar mb-4">
            <div class="row align-items-center">
              <div class="col-md-4">
                <div class="credits-display">
                  <i class="fas fa-coins me-2"></i>
                  <span id="userCredits"><%= <%= typeof user !== 'undefined' ? user.credits : 0 %> %></span> Credits
                </div>
              </div>
              <div class="col-md-4">
                <h5 class="text-light mb-0">
                  <i class="fas fa-user me-2"></i><%= user.name %>
                </h5>
              </div>
              <div class="col-md-4">
                <div class="timer-display" id="gameTimer">
                  <i class="fas fa-clock me-2"></i>
                  <span id="timeLeft">05:00</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Betting Interface -->
  <div class="row mb-5">
    <div class="col-12">
      <div class="card card-glass">
        <div class="card-body p-4">
          <h3 class="text-center text-gradient mb-4">
            <i class="fas fa-coins me-2"></i>Place Your Bet
          </h3>
          
          <!-- Bet Amount Selector -->
          <div class="bet-selector mb-4">
            <div class="row justify-content-center">
              <div class="col-md-8">
                <label class="form-label text-light">Bet Amount (10-500 credits)</label>
                <div class="bet-amount-controls">
                  <div class="input-group">
                    <button class="btn btn-outline-light" type="button" onclick="adjustBet(-50)">-50</button>
                    <button class="btn btn-outline-light" type="button" onclick="adjustBet(-10)">-10</button>
                    <input type="number" id="betAmount" class="form-control text-center" 
                           value="50" min="10" max="500" onchange="validateBetAmount()">
                    <button class="btn btn-outline-light" type="button" onclick="adjustBet(10)">+10</button>
                    <button class="btn btn-outline-light" type="button" onclick="adjustBet(50)">+50</button>
                  </div>
                  <div class="bet-presets mt-3 text-center">
                    <button class="btn btn-sm btn-outline-warning me-2" onclick="setBetAmount(25)">25</button>
                    <button class="btn btn-sm btn-outline-warning me-2" onclick="setBetAmount(100)">100</button>
                    <button class="btn btn-sm btn-outline-warning me-2" onclick="setBetAmount(250)">250</button>
                    <button class="btn btn-sm btn-outline-warning" onclick="setBetAmount(<%= typeof user !== 'undefined' ? user.credits : 0 %>)">All In</button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Rocket Selection -->
  <div class="row">
    <div class="col-12">
      <div class="card card-glass">
        <div class="card-body p-4">
          <h3 class="text-center text-gradient mb-4">
            <i class="fas fa-hand-pointer me-2"></i>Choose Your Rocket
          </h3>
          
          <div class="rocket-grid" id="rocketGrid">
            <% rockets.forEach((rocket, index) => { %>
              <div class="rocket-card" data-rocket-id="<%= rocket.id %>" onclick="selectRocket(<%= rocket.id %>)">
                <div class="rocket-animation">
                  <i class="<%= rocket.icon %> fa-4x rocket-icon"></i>
                </div>
                <h4 class="rocket-name mt-3"><%= rocket.name %></h4>
                <p class="rocket-description text-muted"><%= rocket.description %></p>
                <div class="rocket-stats mt-3">
                  <div class="stat-item">
                    <i class="fas fa-tachometer-alt text-primary"></i>
                    <small class="ms-1">Speed: <%= Math.floor(Math.random() * 40) + 60 %></small>
                  </div>
                  <div class="stat-item">
                    <i class="fas fa-weight-hanging text-info"></i>
                    <small class="ms-1">Weight: <%= Math.floor(Math.random() * 5) + 3 %>kg</small>
                  </div>
                </div>
                <div class="selection-overlay">
                  <i class="fas fa-check-circle fa-3x"></i>
                </div>
              </div>
            <% }); %>
          </div>

          <!-- Launch Button -->
          <div class="text-center mt-5">
            <button id="launchButton" class="btn btn-gradient btn-lg px-5" 
                    onclick="placeBet()" disabled>
              <i class="fas fa-rocket me-2"></i>
              <span class="button-text">Select a rocket first</span>
            </button>
            <div class="mt-3">
              <small class="text-muted">
                <i class="fas fa-info-circle me-1"></i>
                Once you launch, you cannot change your selection!
              </small>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Live Stats -->
  <div class="row mt-5">
    <div class="col-12">
      <div class="card card-glass">
        <div class="card-header bg-transparent border-0">
          <h5 class="text-gradient mb-0">
            <i class="fas fa-chart-bar me-2"></i>Live Round 1 Stats
          </h5>
        </div>
        <div class="card-body">
          <div id="liveStats" class="row text-center">
            <div class="col-6 col-md-3">
              <div class="stat-box">
                <h4 class="text-info" id="totalPlayers">0</h4>
                <small class="text-muted">Players Joined</small>
              </div>
            </div>
            <div class="col-6 col-md-3">
              <div class="stat-box">
                <h4 class="text-warning" id="totalBets">0</h4>
                <small class="text-muted">Bets Placed</small>
              </div>
            </div>
            <div class="col-6 col-md-3">
              <div class="stat-box">
                <h4 class="text-success" id="totalPool">0</h4>
                <small class="text-muted">Total Pool</small>
              </div>
            </div>
            <div class="col-6 col-md-3">
              <div class="stat-box">
                <h4 class="text-danger" id="timeRemaining">05:00</h4>
                <small class="text-muted">Time Left</small>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Bet Confirmation Modal -->
<div class="modal fade" id="betConfirmModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content bg-dark">
      <div class="modal-header border-secondary">
        <h5 class="modal-title text-gradient">
          <i class="fas fa-rocket me-2"></i>Confirm Your Bet
        </h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body text-center">
        <div class="confirmation-details mb-4">
          <h3 class="text-light" id="selectedRocketName">-</h3>
          <p class="text-muted mb-3" id="selectedRocketDescription">-</p>
          
          <div class="bet-summary">
            <div class="row">
              <div class="col-6">
                <div class="summary-item">
                  <i class="fas fa-coins fa-2x text-warning mb-2"></i>
                  <h4 class="text-light" id="confirmBetAmount">0</h4>
                  <small class="text-muted">Credits Bet</small>
                </div>
              </div>
              <div class="col-6">
                <div class="summary-item">
                  <i class="fas fa-wallet fa-2x text-info mb-2"></i>
                  <h4 class="text-light" id="remainingCredits">0</h4>
                  <small class="text-muted">Credits Left</small>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div class="alert alert-warning">
          <i class="fas fa-exclamation-triangle me-2"></i>
          This action cannot be undone!
        </div>
      </div>
      <div class="modal-footer border-secondary">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          <i class="fas fa-times me-2"></i>Cancel
        </button>
        <button type="button" class="btn btn-gradient" onclick="confirmBet()">
          <i class="fas fa-rocket me-2"></i>Launch!
        </button>
      </div>
    </div>
  </div>
</div>

<style>
.rocket-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 20px;
  margin: 20px 0;
}

.rocket-card {
  background: rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(10px);
  border: 2px solid transparent;
  border-radius: 20px;
  padding: 30px 20px;
  text-align: center;
  cursor: pointer;
  transition: all 0.4s ease;
  position: relative;
  overflow: hidden;
}

.rocket-card:hover {
  transform: translateY(-10px) scale(1.02);
  border-color: var(--primary-gradient);
  background: rgba(255, 255, 255, 0.1);
  box-shadow: 0 20px 40px rgba(102, 126, 234, 0.3);
}

.rocket-card.selected {
  border-color: #00f2fe;
  background: rgba(0, 242, 254, 0.1);
  transform: translateY(-10px) scale(1.05);
}

.rocket-animation {
  position: relative;
  margin: 20px 0;
}

.rocket-icon {
  transition: all 0.3s ease;
}

.rocket-card:hover .rocket-icon {
  transform: rotate(-15deg) scale(1.1);
  color: #00f2fe;
}

.rocket-card.selected .rocket-icon {
  color: #00f2fe;
  animation: rocketPulse 2s infinite;
}

.rocket-name {
  color: white;
  margin-bottom: 10px;
  font-weight: bold;
}

.rocket-description {
  font-size: 0.9rem;
  margin-bottom: 15px;
}

.rocket-stats {
  display: flex;
  justify-content: space-around;
  margin-top: 15px;
}

.stat-item {
  color: rgba(255, 255, 255, 0.8);
  font-size: 0.8rem;
}

.selection-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 242, 254, 0.2);
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0;
  transition: all 0.3s ease;
  border-radius: 20px;
}

.rocket-card.selected .selection-overlay {
  opacity: 1;
}

.bet-amount-controls .input-group {
  max-width: 400px;
  margin: 0 auto;
}

.bet-amount-controls input {
  background: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.3);
  color: white;
  font-size: 1.2rem;
  font-weight: bold;
}

.bet-amount-controls input:focus {
  background: rgba(255, 255, 255, 0.15);
  border-color: #00f2fe;
  color: white;
  box-shadow: 0 0 20px rgba(0, 242, 254, 0.3);
}

.timer-display {
  background: rgba(255, 99, 71, 0.2);
  border: 1px solid rgba(255, 99, 71, 0.5);
  padding: 10px 20px;
  border-radius: 10px;
  color: #ff6347;
  font-weight: bold;
}

.timer-display.warning {
  background: rgba(255, 193, 7, 0.2);
  border-color: rgba(255, 193, 7, 0.5);
  color: #ffc107;
  animation: timerPulse 1s infinite;
}

.timer-display.critical {
  background: rgba(220, 53, 69, 0.3);
  border-color: rgba(220, 53, 69, 0.7);
  color: #dc3545;
  animation: timerPulse 0.5s infinite;
}

.summary-item {
  padding: 15px;
  background: rgba(255, 255, 255, 0.05);
  border-radius: 10px;
  margin-bottom: 15px;
}

@keyframes rocketPulse {
  0%, 100% { transform: scale(1) rotate(-15deg); }
  50% { transform: scale(1.1) rotate(-15deg); }
}

@keyframes timerPulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.7; }
}

/* Disabled state */
.rocket-card.disabled {
  opacity: 0.5;
  cursor: not-allowed;
  pointer-events: none;
}

#launchButton:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

/* Mobile responsiveness */
@media (max-width: 768px) {
  .rocket-grid {
    grid-template-columns: repeat(2, 1fr);
    gap: 15px;
  }
  
  .rocket-card {
    padding: 20px 15px;
  }
  
  .rocket-icon {
    font-size: 2.5rem !important;
  }
  
  .user-info-bar .row > div {
    margin-bottom: 10px;
  }
  
  .bet-amount-controls .input-group {
    max-width: 100%;
  }
}
</style>

<script>
let selectedRocket = null;
let gameTimer = 300; // 5 minutes
let timerInterval;
let socket;

document.addEventListener('DOMContentLoaded', function() {
  // Initialize socket
  socket = io();
  socket.emit('join-game', '<%= user._id %>');
  
  // Start game timer
  startGameTimer();
  
  // Load live stats
  updateLiveStats();
  
  // Listen for real-time updates
  socket.on('bet-placed', updateLiveStats);
  socket.on('round-closed', handleRoundClosure);
  
  // Animate rockets entrance
  gsap.from('.rocket-card', {
    opacity: 0,
    y: 50,
    rotation: 10,
    duration: 0.8,
    stagger: 0.1,
    ease: "back.out(1.7)"
  });
});

function startGameTimer() {
  timerInterval = setInterval(() => {
    gameTimer--;
    updateTimerDisplay();
    
    if (gameTimer <= 0) {
      clearInterval(timerInterval);
      disableRocketSelection();
      showTimeUpMessage();
    }
  }, 1000);
}

function updateTimerDisplay() {
  const minutes = Math.floor(gameTimer / 60);
  const seconds = gameTimer % 60;
  const timeString = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
  
  document.getElementById('timeLeft').textContent = timeString;
  document.getElementById('timeRemaining').textContent = timeString;
  
  const timerElement = document.getElementById('gameTimer');
  if (gameTimer <= 60) {
    timerElement.className = 'timer-display critical';
  } else if (gameTimer <= 120) {
    timerElement.className = 'timer-display warning';
  }
}

function adjustBet(amount) {
  const betInput = document.getElementById('betAmount');
  const currentBet = parseInt(betInput.value) || 0;
  const newBet = Math.max(10, Math.min(500, Math.min(<%= <%= typeof user !== 'undefined' ? user.credits : 0 %> %>, currentBet + amount)));
  betInput.value = newBet;
  validateBetAmount();
}

function setBetAmount(amount) {
  const maxBet = Math.min(500, <%= <%= typeof user !== 'undefined' ? user.credits : 0 %> %>);
  const betInput = document.getElementById('betAmount');
  betInput.value = Math.min(amount, maxBet);
  validateBetAmount();
  
  // Animate bet change
  gsap.from(betInput, {
    scale: 1.1,
    duration: 0.3,
    ease: "back.out(1.7)"
  });
}

function validateBetAmount() {
  const betInput = document.getElementById('betAmount');
  const bet = parseInt(betInput.value) || 0;
  const userCredits = <%= <%= typeof user !== 'undefined' ? user.credits : 0 %> %>;
  
  if (bet < 10 || bet > 500 || bet > userCredits) {
    betInput.classList.add('is-invalid');
    return false;
  } else {
    betInput.classList.remove('is-invalid');
    return true;
  }
}

function selectRocket(rocketId) {
  if (gameTimer <= 0) return;
  
  // Remove previous selection
  document.querySelectorAll('.rocket-card').forEach(card => {
    card.classList.remove('selected');
  });
  
  // Add selection to clicked rocket
  const rocketCard = document.querySelector(`[data-rocket-id="${rocketId}"]`);
  rocketCard.classList.add('selected');
  selectedRocket = rocketId;
  
  // Enable launch button
  const launchButton = document.getElementById('launchButton');
  launchButton.disabled = false;
  launchButton.querySelector('.button-text').textContent = 'Launch Rocket!';
  
  // Animate selection
  gsap.timeline()
    .to(rocketCard, {
      scale: 1.1,
      duration: 0.2,
      ease: "back.out(1.7)"
    })
    .to(rocketCard, {
      scale: 1.05,
      duration: 0.2
    });
  
  // Sound effect (if available)
  playSelectionSound();
}

function placeBet() {
  if (!selectedRocket || !validateBetAmount()) {
    showError('Please select a rocket and enter a valid bet amount.');
    return;
  }
  
  const betAmount = parseInt(document.getElementById('betAmount').value);
  
  // Show confirmation modal
  showBetConfirmation(selectedRocket, betAmount);
}

function showBetConfirmation(rocketId, betAmount) {
  const rocketCard = document.querySelector(`[data-rocket-id="${rocketId}"]`);
  const rocketName = rocketCard.querySelector('.rocket-name').textContent;
  const rocketDescription = rocketCard.querySelector('.rocket-description').textContent;
  
  document.getElementById('selectedRocketName').textContent = rocketName;
  document.getElementById('selectedRocketDescription').textContent = rocketDescription;
  document.getElementById('confirmBetAmount').textContent = betAmount;
  document.getElementById('remainingCredits').textContent = <%= <%= typeof user !== 'undefined' ? user.credits : 0 %> %> - betAmount;
  
  const modal = new bootstrap.Modal(document.getElementById('betConfirmModal'));
  modal.show();
}

async function confirmBet() {
  const betAmount = parseInt(document.getElementById('betAmount').value);
  
  try {
    showLoading('Placing your bet...');
    
    const response = await fetch('/game/round1/bet', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        rocketId: selectedRocket,
        betAmount: betAmount
      })
    });
    
    const data = await response.json();
    
    if (data.success) {
      // Hide modal
      bootstrap.Modal.getInstance(document.getElementById('betConfirmModal')).hide();
      
      // Update credits display
      document.getElementById('userCredits').textContent = data.remainingCredits;
      
      // Disable all rockets
      disableRocketSelection();
      
      // Show success and redirect
      showSuccess('Bet placed successfully! Redirecting to leaderboard...');
      
      setTimeout(() => {
        window.location.href = '/game/leaderboard';
      }, 2000);
      
    } else {
      showError(data.error || 'Failed to place bet');
    }
    
  } catch (error) {
    console.error('Bet error:', error);
    showError('Network error. Please try again.');
  } finally {
    hideLoading();
  }
}

function disableRocketSelection() {
  document.querySelectorAll('.rocket-card').forEach(card => {
    card.classList.add('disabled');
    card.onclick = null;
  });
  
  document.getElementById('launchButton').disabled = true;
  document.getElementById('launchButton').querySelector('.button-text').textContent = 'Betting Closed';
}

function showTimeUpMessage() {
  showWarning('Time is up! Betting is now closed.');
  
  if (!selectedRocket) {
    setTimeout(() => {
      window.location.href = '/game/leaderboard';
    }, 3000);
  }
}

async function updateLiveStats() {
  try {
    const response = await fetch('/admin/api/stats');
    const data = await response.json();
    
    if (data.success) {
      document.getElementById('totalPlayers').textContent = data.stats.activeUsers;
      document.getElementById('totalBets').textContent = data.stats.round1Bets;
      document.getElementById('totalPool').textContent = (data.stats.round1Bets * 100).toLocaleString(); // Estimate
      
      // Animate number updates
      gsap.from('#liveStats .stat-box h4', {
        scale: 1.2,
        duration: 0.3,
        stagger: 0.1,
        ease: "back.out(1.7)"
      });
    }
  } catch (error) {
    console.error('Error updating stats:', error);
  }
}

function handleRoundClosure(data) {
  if (data.round === 1) {
    clearInterval(timerInterval);
    disableRocketSelection();
    showInfo(`Round 1 complete! Winning rocket: ${data.result}`);
    
    setTimeout(() => {
      window.location.href = '/game/leaderboard';
    }, 3000);
  }
}

function playSelectionSound() {
  // Add sound effect if available
  try {
    const audio = new Audio('/sounds/select.mp3');
    audio.volume = 0.3;
    audio.play().catch(() => {}); // Ignore if audio fails
  } catch (e) {}
}

// Cleanup on page unload
window.addEventListener('beforeunload', function() {
  if (timerInterval) {
    clearInterval(timerInterval);
  }
  if (socket) {
    socket.disconnect();
  }
});
</script>
